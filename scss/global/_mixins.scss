@use "settings" as s;
@use "functions" as f;
@use "sass:meta";
@use "sass:map";

// メディアクエリ用mixin。settingsの$breakpointsのmapキーを第一引数に指定する（既定値はs）
// 第一引数が一文字の場合、max-widthの@mediaを出力。二文字の場合は分割してmin-width,max-widthの範囲で@mediaを出力
// 第二引数は第一引数が一文字の場合に「min」指定でmin-widthを出力する（オプション的役割）
// 使用方法：@include mq(s){}、mq(sm){}、mq(l,min){}など
@mixin mq($bpString: s, $minmax: max) {
  // 第一引数の文字列を格納する配列
  $bpArr: ();
  // ブレークポイントのmap
  $bpList: s.$breakpoints;
  // 第一引数の文字数をカウントしてループ
  @for $i from 1 through str-length($bpString) {
    //冒頭で宣言した空配列に、分割した文字列を格納していく（配列化したいので）
    $bpArr: append($bpArr, str-slice($bpString, $i, $i));
  }
  @if (length($bpArr) == 1) {
    // 配列の要素が1つだったら(1文字だったら)
    $int: 1;
    @if ($minmax == min) {
      $int: 0;
    }
    @media (#{$minmax}-width: (map-get($bpList,#{$bpArr}) - $int)) {
      @content;
    }
  } @else if(length($bpArr) == 2) {
    // 配列の要素が2つだったら(2文字だったら)
    @media (min-width: (map-get($bpList,#{nth($bpArr,1)}))) and (max-width: (map-get($bpList,#{nth($bpArr,2)}) - 1)) {
      @content;
    }
  }
}

// utility用classで利用するメディアクエリmixin
@mixin mqAll($class, $bp: s.$breakpointsClass, $check: true) {
  $mediaKey: "";
  .#{$class} {
    @content ($mediaKey);
  }
  $list: "";
  @if ($check == true or type-of($check) == list) {
    // $chekがtrueもしくは配列形式の場合
    // 参照するレスポンシブのリストをどこから引っ張るか条件分岐して$list内に格納する
    @if ($check == true) {
      // $checkがtrue（デフォルト）の場合
      $list: $bp;
    } @else if(type-of($check) == list) {
      // $checkが配列形式（responsiveキーで設定してある）の場合
      $list: $check;
    }
    @each $key, $val in $list {
      $prefix: $key;
      $hyphen: "-";
      @if (type-of($check) == list) {
        $val: map-get(s.$breakpointsClass, $key);
        $prefix: "";
        $hyphen: "";
      }
      $mediaQuery: "";
      @if (type-of($val) == string) {
        $mediaQuery: "(max-width: #{map-get(s.$breakpoints,$val) - 1})";
      } @else if(type-of($val) == list) {
        $mediaQuery: "(min-width: #{map-get(s.$breakpoints,nth($val,1))}) and (max-width: #{map-get(s.$breakpoints,nth($val,2)) - 1})";
      }
      @media #{$mediaQuery} {
        .#{$prefix}#{$hyphen}#{$class} {
          $mediaKey: $key;
          @content ($mediaKey);
        }
      }
    }
  }
}

// 下記itemInUtilityMap()内の処理
// $pはpropertyキー、$argは$itemValues、$valは$arg内の各value(初期値null)
@mixin outputItemInUtilityMap($p, $arg, $val: null) {
  // propertyキーの値に複数プロパティが設定されている場合は、incrementのpropertiesオブジェクトに2番目以降の値をセットする
  // 未指定なら1ループ目と同じ値を設定
  @for $i from 1 through length($p) {
    $properties: 1;
    @if ($val == null) {
      $val: $arg;
    }
    @if ($i > 1 and map-has-key($arg, "properties")) {
      // 2ループ目以降且つpropertiesキーがある場合
      $val: map-get($arg, "properties");
      $properties: $i - 1;
    } @else if($i > 1 and type-of($val) == "list") {
      // 2ループ目以降且つ$valが配列だった場合
      $properties: $i;
    }
    $property: nth($val, $properties);
    // !important時の処理（#{'!'}をバリュー末尾につけている場合）
    @if (type-of($property) == string and str-index($property, "!") != "") {
      $property: f.strReplace("!", " !important", $property);
    }
    #{nth($p,$i)}: $property;
  }
}

// 下記utilityMap()内の処理
// $pはpropertyキー、$vは$mapValues、$itemは(increment,values)のどちらか、$argは$itemValues
@mixin itemInUtilityMap($p, $v, $item, $arg) {
  // hoverキーが存在しtrueかどうか確認
  $hover: false;
  @if (map-has-key($v, "hover") and map-get($v, "hover") == true) {
    $hover: true;
  }
  @if ($item == "increment") {
    // incrementキーの時
    // increment配列のmin値とmax値からforループ
    @for $inc from map-get($arg, "min") through map-get($arg, "max") {
      // step値が1未満(0.1等)だった場合、class名に「.」を付けられないので小数点を正数にする
      $step: map-get($arg, "step");
      @if ($step < 1) {
        $step: 1;
      }
      // unitキーがあった場合、値の末尾に指定した単位を付与する
      $unit: 0;
      @if (map-has-key($arg, "unit")) {
        $unit: map-get($arg, "unit");
      }
      // min(max)値とstep値を計算した結果マイナス値だった場合はハイフンを除去する(--のように連続するのを避けるため)
      $numbers: "#{$inc * $step}";
      $hyphen: "-";
      @if ($inc * $step < 0) {
        $hyphen: "";
        $numbers: f.strReplace("-", "", $numbers);
      }
      // min(max)値とstep値+単位の計算結果
      $val: $inc * map-get($arg, "step") + $unit;
      @if ($unit == "percentage" or $unit == "percent" or $unit == "%") {
        $val: percentage(calc($inc * map-get($arg, "step") / 100));
      }
      // wrapキーがあった場合は計算結果をwrap値()で囲む
      @if (map-has-key($arg, "wrap")) {
        $val: map-get($arg, "wrap") + "(" + $val + ")";
      }
      // suffixキーがあった場合はclass名の最後に付け足す
      $suffix: "";
      @if (map-has-key($arg, "suffix")) {
        $suffix: map-get($arg, "suffix");
      }
      // 出力する内容
      &#{$hyphen}#{$numbers}#{$suffix} {
        @if ($hover) {
          @include hover {
            @include outputItemInUtilityMap($p, $arg, $val);
          }
        } @else {
          @include outputItemInUtilityMap($p, $arg, $val);
        }
      }
    }
  } @else if($item == "values") {
    @if (type-of($arg) == "string") {
      // valuesキーの値がmapではなくstringの場合
      & {
        @if ($hover) {
          @include hover {
            @include outputItemInUtilityMap($p, $arg);
          }
        } @else {
          @include outputItemInUtilityMap($p, $arg);
        }
      }
    } @else {
      // valuesキーの値がmap配列の場合
      @each $key, $val in $arg {
        // functionキーがある場合、sass:metaのmodule-functionsで該当する関数を取得し処理結果を$valに戻して返す
        @if (map-has-key($v, "function")) {
          $functions: meta.module-functions(f);
          $functionName: map-get($v, "function");
          $function: map.get($functions, $functionName);
          $val: meta.call($function, $val);
        }
        // 出力する内容
        &-#{$key} {
          @if ($hover) {
            @include hover {
              @include outputItemInUtilityMap($p, $arg, $val);
            }
          } @else {
            @include outputItemInUtilityMap($p, $arg, $val);
          }
        }
      }
    }
  }
}

// utilityMap($util:配列名,$map:第一階層のキーを指定)
@mixin utilityMap($util, $map) {
  // $classPrefix:第二階層キー名がclass名の頭につく
  @each $classPrefix, $mapValues in map-get($util, $map) {
    // responsiveキーのvalueを取得
    $responsive: map-get($mapValues, "responsive");
    // responsive条件分岐確認用
    $responsiveCheck: null;
    // _settingsで定義した$breakpointsClassを参照
    $breakpoints: s.$breakpointsClass;
    @if ($responsive == false) {
      // responsiveキーがfalseの場合(レスポンシブ用classは生成されない)
      $responsiveCheck: false;
    } @else if(type-of($responsive) == map) {
      // responsiveキーがmap配列の場合（レスポンシブ用classは別定義したvaluesが出力される）
      $responsiveCheck: ();
      // mqAll()に渡すブレークポイント値を既存のリストから削除しておく
      $breakpoints: map-remove(s.$breakpointsClass, map-keys($responsive));
      // 定義したrensponsiveキーを全て取得し、$responsiveCheck配列に入れてmqAll()に渡す
      @each $keysVal in map-keys($responsive) {
        $responsiveCheck: append($responsiveCheck, $keysVal);
      }
    } @else {
      // デフォルトの設定(レスポンシブ用classが生成される)
      $responsiveCheck: true;
    }
    // レスポンシブ用classの出力mixin
    @include mqAll($classPrefix, $breakpoints, $responsiveCheck) using
      ($mediaKey) {
      // $property:プロパティ名を取得
      $property: map-get($mapValues, "property");
      // incrementもしくはvaluesキーのどちらかは必須
      $arr: ("increment", "values");
      @each $item in $arr {
        @if (map-has-key($mapValues, $item)) {
          // responsiveキーがありmap形式時は$itemValuesにresponsive=>キーのvaluesを渡す
          $valuesFrom: $mapValues;
          @if (type-of($responsiveCheck) == list and $mediaKey != "") {
            $valuesFrom: map-get($responsive, $mediaKey);
          }
          // responsiveキーがない時は$mapValuesを渡す
          $itemValues: map-get($valuesFrom, $item);
          $typeofItem: type-of($itemValues);
          // $itemValuesを出力させる内部処理はvaluesInUtilityMap()参照
          // $itemValuesの型判定
          @if ($typeofItem == "list") {
            // listの配列ならfor文を回す
            @for $i from 1 through length($itemValues) {
              $itemValuesArg: nth($itemValues, $i);
              @include itemInUtilityMap(
                $property,
                $mapValues,
                $item,
                $itemValuesArg
              );
            }
          } @else if($typeofItem == "map") {
            // mapの連想配列ならそのまま出力
            $itemValuesArg: $itemValues;
            @include itemInUtilityMap(
              $property,
              $mapValues,
              $item,
              $itemValuesArg
            );
          } @else if($typeofItem == "string") {
            // stringならそのまま出力
            $itemValuesArg: $itemValues;
            @include itemInUtilityMap(
              $property,
              $mapValues,
              $item,
              $itemValuesArg
            );
          }
        }
      }
    }
  }
}

// font-family
@mixin font(
  $fontFamily: nth(map-get(s.$fontList, primary), 1),
  $fontWeight: nth(map-get(s.$fontList, primary), 2)
) {
  font-family: nth(map-get(s.$fontList, $fontFamily), 1);
  font-weight: $fontWeight;
}

// keyframesアニメーション
@mixin keyframes($name) {
  @-webkit-keyframes #{$name} {
    @content;
  }
  @keyframes #{$name} {
    @content;
  }
}

// :hover時のアクションをタッチデバイスには適用させない
@mixin hover {
  @media (hover: none) {
    -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
    // スマホ時にもhoverスタイルを当てたかったらここのコメントアウトを解除
    // &:active {
    //   @content;
    // }
  }
  @media (-ms-high-contrast: none),
    (-ms-high-contrast: active),
    (-moz-touch-enabled: 0),
    (hover: hover) {
    &:hover {
      @content;
    }
  }
}
// マーカー下線
@mixin marker($color: #fff7bc) {
  background: rgba(0, 0, 0, 0) linear-gradient(transparent 60%, $color 0%)
    repeat scroll 0 0;
}
// グラデーション背景
@mixin gradient(
  $colorStart: map-get(s.$colorList, primary),
  $colorEnd: map-get(s.$colorList, secondary),
  $deg: 180deg,
  $opacityStart: 1,
  $opacityEnd: 1
) {
  background: linear-gradient(
    $deg,
    rgba($colorStart, $opacityStart) 0%,
    rgba($colorEnd, $opacityEnd) 100%
  );
  filter: progid:DXImageTransform.Microsoft.gradient( startColorstr=#{$colorStart}, endColorstr=#{$colorEnd},GradientType=1 );
}
